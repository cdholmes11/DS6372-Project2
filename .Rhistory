## Source - https://statsandr.com/blog/an-efficient-way-to-install-and-load-r-packages/
# Package names
packages <- c("aplore3", "tidyverse")
# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
# Packages loading
invisible(lapply(packages, library, character.only = TRUE))
packages
df <- glow_bonemed
df
summary(df)
?glow_bonemed
is.na(df)
colSums(is.na(df))
rowSums(is.na(df))
str(df)
heatmap(df)
length(df)
summary(df)
nrow(df)
summary(df)
pairs(df)
ggpairs(df)
library(ggplot2)
ggpairs(df)
library(GGally)
ggpairs(df)
summary(df)
str(df)
gg_miss_var(df)
library(gg_miss_var)
install.packages("gg_miss_var")
gg_miss_var(df)
library(naniar)
gg_miss_var(df)
dflda<- df[c("age","weight","height","bmi","fracscore")]
dflda
ggpairs(dflda)
dflda<- df[c("age","weight","height","bmi","fracscore","fracture")]
ggpairs(dflda,aes(color =fracture))
ggpairs(dflda,aes(color = fracture),lower = list(continuous = wrap("points", alpha = 0.3,    size=0.1)))
dflda<- df[c("age","weight","height","bmi","fracscore","fracture")]
ggpairs(dflda,aes(color = fracture),lower = list(continuous = wrap("points", alpha = 0.3,    size=0.5)))
ggpairs(dflda,aes(color = fracture))
fitControl<-trainControl(method="repeatedcv",number=5,repeats=1,classProbs=TRUE, summaryFunction=mnLogLoss)
library(caret)
fitControl<-trainControl(method="repeatedcv",number=5,repeats=1,classProbs=TRUE, summaryFunction=mnLogLoss)
lda.fit<-train(fracture~.,
data=dflda,
method="lda",
trControl=fitControl,
metric="logLoss")
lda.fit
qda.fit<-train(fracture~.,
data=dflda,
method="qda",
trControl=fitControl,
metric="logLoss")
qda.fit
set.seed(1234)
knn.fit<-train(fracture~.,
data=dflda,
method="knn",
trControl=fitControl,
tuneGrid=data.frame(k=c(1,5,10,15,25,50,100,200,300,400)),
metric="logLoss")
knn.fit
plot(qda.fit)
plot(knn.fit)
levels((dflda$fracture))
View(dflda)
index<-sample(1:nrow(data),500,replace=F)
train<-dflda[index,]
test<-dflda[-index,]
index<-sample(1:nrow(dflda),500,replace=F)
train<-dflda[index,]
test<-dflda[-index,]
train
test
view(train)
test<-dflda[-index,]
test
sample <- sample(c(TRUE, FALSE), nrow(dflda), replace=TRUE, prob=c(0.7,0.3))
set.seed(1)
#use 70% of dataset as training set and 30% as test set
sample <- sample(c(TRUE, FALSE), nrow(dflda), replace=TRUE, prob=c(0.7,0.3))
train  <- dflda[sample, ]
test   <- dflda[!sample, ]
train
test
set.seed(1)
#use 70% of dataset as training set and 30% as test set
sample <- sample(c(TRUE, FALSE), nrow(dflda), replace=TRUE, prob=c(0.8,0.2))
train  <- dflda[sample, ]
test   <- dflda[!sample, ]
train
set.seed(1)
#use 70% of dataset as training set and 30% as test set
sample <- sample(c(TRUE, FALSE), nrow(dflda), replace=TRUE, prob=c(0.6,0.4))
train  <- dflda[sample, ]
test   <- dflda[!sample, ]
train
test
test   <- dflda[!sample, ]
test
ss <- sample(1:3,size=nrow(df),replace=TRUE,prob=c(0.8,0.1,0.1))
train <- dflda[ss==1,]
set.seed(123)
# Split data into smaller sets: 80% training, 10% test, and 10% validate
ss <- sample(1:3,size=nrow(df),replace=TRUE,prob=c(0.8,0.1,0.1))
train <- dflda[ss==1,]
test <- dflda[ss==2,]
valid <-dflda[ss==3,]
train
View(train)
test <- dflda[ss==2,]
View(test)
View(valid)
library(caret)
fitControl<-trainControl(method="repeatedcv",number=5,repeats=1,classProbs=TRUE, summaryFunction=mnLogLoss)
lda.fit<-train(fracture~.,
data=train,
method="lda",
trControl=fitControl,
metric="logLoss")
lda.fit
qda.fit<-train(fracture~.,
data=train,
method="qda",
trControl=fitControl,
metric="logLoss")
qda.fit
set.seed(1234)
knn.fit<-train(fracture~.,
data=train,
method="knn",
trControl=fitControl,
tuneGrid=data.frame(k=c(1,5,10,15,25,50,100,200,300,400)),
metric="logLoss")
knn.fit
plot(knn.fit)
#View(valid)
valid$fracture
predictions <- data.frame(status = valid$fracture)
predictions <- data.frame(status = valid$fracture)
predictions$knn <- predict(knn.fit, valid, type = "prob")[,"Yes"]
predictions$LDA <- predict(lda.fit, valid, type = "prob")[,"Yes"]
predictions$QDA <- predict(qda.fit, valid, type = "prob")[,"Yes"]
View(predictions)
predictions$knn <- predict(knn.fit, valid, type = "prob")[,"No"]
View(predictions)
