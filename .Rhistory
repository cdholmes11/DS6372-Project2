ggplot(aes(x = weight, y = frac_num)) +
geom_point() +
geom_smooth(formula = y ~ x, method = "loess", span = .8) +
ggtitle("Weight vs Fracture")
df %>%
ggplot(aes(x = height, y = frac_num)) +
geom_point() +
geom_smooth(formula = y ~ x, method = "loess", span = .8) +
ggtitle("Height vs Fracture")
df %>%
ggplot(aes(x = bmi, y = frac_num)) +
geom_point() +
geom_smooth(formula = y ~ x, method = "loess", span = .8) +
ggtitle("BMI vs Fracture")
df %>%
ggplot(aes(x = fracscore, y = frac_num)) +
geom_point() +
geom_smooth(formula = y ~ x, method = "loess", span = .8) +
ggtitle("Fracscore vs Fracture")
# Correlation
M <- cor(num_df[, 1:8])
corrplot.mixed(M, lower = 'number', upper = 'ellipse', order = 'alphabet')
model <- lm(frac_num ~ ., data = df[, -c(15)])
vif(model)
<<<<<<< Updated upstream
# Numeric Variables
df %>%
ggplot(aes(x = age, y = frac_num)) +
geom_point() +
geom_smooth(formula = y ~ x, method = "loess", span = .8) +
ggtitle("Age vs Fracture")
df %>%
ggplot(aes(x = weight, y = frac_num)) +
geom_point() +
geom_smooth(formula = y ~ x, method = "loess", span = .8) +
ggtitle("Weight vs Fracture")
df %>%
ggplot(aes(x = height, y = frac_num)) +
geom_point() +
geom_smooth(formula = y ~ x, method = "loess", span = .8) +
ggtitle("Height vs Fracture")
df %>%
ggplot(aes(x = bmi, y = frac_num)) +
geom_point() +
geom_smooth(formula = y ~ x, method = "loess", span = .8) +
ggtitle("BMI vs Fracture")
df %>%
ggplot(aes(x = fracscore, y = frac_num)) +
geom_point() +
geom_smooth(formula = y ~ x, method = "loess", span = .8) +
ggtitle("Fracscore vs Fracture")
# Correlation
M <- cor(num_df[, 1:8])
corrplot.mixed(M, lower = 'number', upper = 'ellipse', order = 'alphabet')
model <- lm(frac_num ~ ., data = df[, -c(15)])
vif(model)
# Categorical Variables
g1 <-
df %>%
group_by(fracture, priorfrac) %>%
summarise(cnt = n()) %>%
mutate(perc = round(cnt / sum(cnt), 4)) %>%
arrange(desc(perc))
g1
g1[c(2, 3), ] %>%
ggplot(aes(x = reorder(priorfrac, -perc), y = perc, color = priorfrac)) +
geom_bar(aes(fill = priorfrac), stat = "identity") +
xlab("Prior Fracture") +
ylab("Proportion")
g2 <-
df %>%
group_by(fracture, premeno) %>%
summarise(cnt = n()) %>%
mutate(perc = round(cnt / sum(cnt), 4)) %>%
arrange(desc(perc))
g2
g2[c(2, 3), ] %>%
ggplot(aes(x = reorder(premeno, -perc), y = perc, color = premeno)) +
geom_bar(aes(fill = premeno), stat = "identity") +
xlab("Premeno") +
ylab("Proportion")
g3 <-
df %>%
group_by(fracture, momfrac) %>%
summarise(cnt = n()) %>%
mutate(perc = round(cnt / sum(cnt), 4)) %>%
arrange(desc(perc))
ylab("Proportion")
g3
g3[c(2, 3), ] %>%
ggplot(aes(x = reorder(momfrac, -perc), y = perc, color = momfrac)) +
geom_bar(aes(fill = momfrac), stat = "identity") +
xlab("Momfrac") +
ylab("Proportion")
g4 <-
df %>%
group_by(fracture, armassist) %>%
summarise(cnt = n()) %>%
mutate(perc = round(cnt / sum(cnt), 4)) %>%
arrange(desc(perc))
g4
g4[c(2, 3), ] %>%
ggplot(aes(x = reorder(armassist, -perc), y = perc, color = armassist)) +
geom_bar(aes(fill = armassist), stat = "identity") +
xlab("Armassist") +
ylab("Proportion")
g5 <-
df %>%
group_by(fracture, smoke) %>%
summarise(cnt = n()) %>%
mutate(perc = round(cnt / sum(cnt), 4)) %>%
arrange(desc(perc))
g5
g5[c(1, 4), ] %>%
ggplot(aes(x = reorder(smoke, -perc), y = perc, color = smoke)) +
geom_bar(aes(fill = smoke), stat = "identity") +
xlab("Smoke") +
ylab("Proportion")
g6 <-
df %>%
group_by(fracture, raterisk) %>%
summarise(cnt = n()) %>%
mutate(perc = round(cnt / sum(cnt), 4)) %>%
arrange(desc(perc))
g6
g6[c(1, 2, 6), ] %>%
ggplot(aes(x = reorder(raterisk, -perc), y = perc, color = raterisk)) +
geom_bar(aes(fill = raterisk), stat = "identity") +
xlab("Raterisk") +
ylab("Proportion")
g7 <-
df %>%
group_by(fracture, bonemed) %>%
summarise(cnt = n()) %>%
mutate(perc = round(cnt / sum(cnt), 4)) %>%
arrange(desc(perc))
g7
g7[c(2, 3), ] %>%
ggplot(aes(x = reorder(bonemed, -perc), y = perc, color = bonemed)) +
geom_bar(aes(fill = bonemed), stat = "identity") +
xlab("Bonemed") +
ylab("Proportion")
g8 <-
df %>%
group_by(fracture, bonemed_fu) %>%
summarise(cnt = n()) %>%
mutate(perc = round(cnt / sum(cnt), 4)) %>%
arrange(desc(perc))
g8
g8[c(2, 3), ] %>%
ggplot(aes(x = reorder(bonemed_fu, -perc), y = perc, color = bonemed_fu)) +
geom_bar(aes(fill = bonemed_fu), stat = "identity") +
xlab("Bonemed_fu") +
ylab("Proportion")
g8 <-
df %>%
group_by(fracture, bonetreat) %>%
summarise(cnt = n()) %>%
mutate(perc = round(cnt / sum(cnt), 4)) %>%
arrange(desc(perc))
g8
g8[c(2, 3), ] %>%
ggplot(aes(x = reorder(bonetreat, -perc), y = perc, color = bonetreat)) +
geom_bar(aes(fill = bonetreat), stat = "identity") +
xlab("Bonetreat") +
ylab("Proportion")
library(gplots)
dflda1<- df[c("age","weight","height","bmi","fracscore")]
corD <- cor(dflda1)
heatmap.2(corD,scale ="column",tracecol ="#303030",margin=c(9, 10))
<<<<<<< Updated upstream
# Numeric Variables
df %>%
ggplot(aes(x = age, y = frac_num)) +
geom_point() +
geom_smooth(formula = y ~ x, method = "loess", span = .8) +
ggtitle("Age vs Fracture")
df %>%
ggplot(aes(x = weight, y = frac_num)) +
geom_point() +
geom_smooth(formula = y ~ x, method = "loess", span = .8) +
ggtitle("Weight vs Fracture")
df %>%
ggplot(aes(x = height, y = frac_num)) +
geom_point() +
geom_smooth(formula = y ~ x, method = "loess", span = .8) +
ggtitle("Height vs Fracture")
df %>%
ggplot(aes(x = bmi, y = frac_num)) +
geom_point() +
geom_smooth(formula = y ~ x, method = "loess", span = .8) +
ggtitle("BMI vs Fracture")
df %>%
ggplot(aes(x = fracscore, y = frac_num)) +
geom_point() +
geom_smooth(formula = y ~ x, method = "loess", span = .8) +
ggtitle("Fracscore vs Fracture")
# Correlation
M <- cor(num_df[, 1:8])
corrplot.mixed(M, lower = 'number', upper = 'ellipse', order = 'alphabet')
model <- lm(frac_num ~ ., data = df[, -c(15)])
vif(model)
df %>%
ggplot(aes(x = age, y = frac_num)) +
geom_point() +
geom_smooth(formula = y ~ x, method = "loess", span = .8) +
ggtitle("Age vs Fracture")
df %>%
ggplot(aes(x = weight, y = frac_num)) +
geom_point() +
geom_smooth(formula = y ~ x, method = "loess", span = .8) +
ggtitle("Weight vs Fracture")
df %>%
ggplot(aes(x = height, y = frac_num)) +
geom_point() +
geom_smooth(formula = y ~ x, method = "loess", span = .8) +
ggtitle("Height vs Fracture")
df %>%
ggplot(aes(x = bmi, y = frac_num)) +
geom_point() +
geom_smooth(formula = y ~ x, method = "loess", span = .8) +
ggtitle("BMI vs Fracture")
df %>%
ggplot(aes(x = fracscore, y = frac_num)) +
geom_point() +
geom_smooth(formula = y ~ x, method = "loess", span = .8) +
ggtitle("Fracscore vs Fracture")
M <- cor(num_df[, 1:8])
corrplot.mixed(M, lower = 'number', upper = 'ellipse', order = 'alphabet')
model <- lm(frac_num ~ ., data = df[, -c(15)])
vif(model)
ggpairs(lda_train, aes(color = fracture))
lda_train <- train[, c("age", "weight", "height", "bmi", "fracscore", "fracture")]
lda_test <- test[, c("age", "weight", "height", "bmi", "fracscore", "fracture")]
lda_valid <- valid[, c("age", "weight", "height", "bmi", "fracscore", "fracture")]
ggpairs(lda_train, aes(color = fracture))
lda_train
lda_test
ggpairs(dflda,aes(color = fracture))
length(lda_train)
set.seed(123)
# Split data into smaller sets: 80% training, 10% test, and 10% validate
ss <- sample(1:3, size = nrow(df), replace = TRUE, prob = c(0.8, 0.1, 0.1))
train <- df[ss == 1, ]
test <- df[ss == 2, ]
valid <- df[ss == 3, ]
```
train
test <- df[ss == 2, ]
valid <- df[ss == 3, ]
test
fitControl<-trainControl(method="repeatedcv",number=5,repeats=1,classProbs=TRUE, summaryFunction=mnLogLoss)
lda.fit <- train(fracture ~ .,
data = lda_train,
method = "lda",
trControl = fitControl,
metric = "logLoss"
)
lda.fit
qda.fit <- train(fracture ~ .,
data = lda_train,
method = "qda",
trControl = fitControl,
metric = "logLoss"
)
qda.fit
set.seed(1234)
knn.fit <- train(fracture ~ .,
data = lda_train,
method = "knn",
trControl = fitControl,
tuneGrid = data.frame(k = c(1, 5, 10, 15, 25, 50, 100, 200, 300, 400)),
metric = "logLoss"
)
knn.fit
plot(knn.fit)
predictions <- data.frame(status = lda_valid$fracture)
predictions$knn <- predict(knn.fit, lda_valid, type = "prob")[, "No"]
predictions$LDA <- predict(lda.fit, lda_valid, type = "prob")[, "No"]
predictions$QDA <- predict(qda.fit, lda_valid, type = "prob")[, "No"]
View(predictions)
lda_valid
plot(lda.fit)
dflda1<- df[c("age","weight","height","bmi","fracscore")]
corD <- cor(dflda1)
heatmap.2(corD,scale ="column",tracecol ="#303030",margin=c(9, 10))
<<<<<<< Updated upstream
# Numeric Variables
df %>%
ggplot(aes(x = age, y = frac_num)) +
geom_point() +
geom_smooth(formula = y ~ x, method = "loess", span = .8) +
ggtitle("Age vs Fracture")
df %>%
ggplot(aes(x = weight, y = frac_num)) +
geom_point() +
geom_smooth(formula = y ~ x, method = "loess", span = .8) +
ggtitle("Weight vs Fracture")
df %>%
ggplot(aes(x = height, y = frac_num)) +
geom_point() +
geom_smooth(formula = y ~ x, method = "loess", span = .8) +
ggtitle("Height vs Fracture")
df %>%
ggplot(aes(x = bmi, y = frac_num)) +
geom_point() +
geom_smooth(formula = y ~ x, method = "loess", span = .8) +
ggtitle("BMI vs Fracture")
df %>%
ggplot(aes(x = fracscore, y = frac_num)) +
geom_point() +
geom_smooth(formula = y ~ x, method = "loess", span = .8) +
ggtitle("Fracscore vs Fracture")
# Correlation
M <- cor(num_df[, 1:8])
corrplot.mixed(M, lower = 'number', upper = 'ellipse', order = 'alphabet')
model <- lm(frac_num ~ ., data = df[, -c(15)])
vif(model)
library(gplots)
dflda1<- df[c("age","weight","height","bmi","fracscore")]
corD <- cor(dflda1)
heatmap.2(corD,scale ="column",tracecol ="#303030",margin=c(9, 10))
lda.m <- lda(fracture~age+weight+height,data=lda_train)
??lda
library(MASS)
lda.m <- lda(fracture~age+weight+height,data=lda_train)
lda.m
plot(lda.m)
plot(lda.fit)
lda.m.pred <- predict(lda.m,lda.valid)
lda.m.pred <- predict(lda.m,lda_valid)
lda.m.pred <-
lda.m.pred
lda.m.pred
confusionMatrix(table(lda.m.pred,lda_valid$fracture),positive = "Yes")
lda.m
lda.m.pred <- predict(lda.m,lda_valid)
lda.m.pred
ldahist(lda.m.pred$x[,1],g = fracture)
ldahist(lda.m.pred$x[,1],g = fracture)
??ldahist
ldahist(lda.m.pred$x[,1],g = fracture)
ldahist(lda.m.pred$x[,1], g = fracture)
ldahist(lda.m.pred$x[,1], g = fracture)
confusionMatrix(table(lda.m.pred,lda_valid$fracture),positive = "Yes")
lda_valid$fracture
predictions <- data.frame(status = lda_valid$fracture)
confusionMatrix(table(lda.m.pred,lda_valid$fracture),positive = "Yes")
lda.m.pred <- predict(lda.m,lda_valid)
lda.m.pred
predictions$LDA <- predict(lda.m, lda_valid, type = "prob")[, "Yes"]
predictions <- data.frame(status = lda_valid$fracture)
predictions$LDA <- predict(lda.m, lda_valid, type = "prob")[, "Yes"]
confusionMatrix(data=lda.m.pred,reference=lda_valid$fracture,positive="Yes")
threshold=0.4
lda.preds<-factor(ifelse(lda.m.pred >threshold,"Yes","No"))
lda.m.pred
threshold=0.4
lda.preds<-factor(ifelse(lda.m.pred$posterior >threshold,"Yes","No"))
confusionMatrix(data=lda.m.pred,reference=lda_valid$fracture,positive="Yes")
confusionMatrix(data=lda.preds,reference=lda_valid$fracture,positive="Yes")
lda.preds<-factor(ifelse(lda.m.pred$posterior >threshold,"Yes","No"))
confusionMatrix(data=lda.preds,reference=lda_valid$fracture,positive="Yes")
lda.preds<-factor(ifelse(lda.m.pred$posterior[,2] >threshold,"Yes","No"))
confusionMatrix(data=lda.preds,reference=lda_valid$fracture,positive="Yes")
lda.preds<-factor(ifelse(lda.m.pred$posterior[,1] >threshold,"Yes","No"))
confusionMatrix(data=lda.preds,reference=lda_valid$fracture,positive="Yes")
lda.preds<-factor(ifelse(lda.m.pred$posterior[,2] >threshold,"Yes","No"))
confusionMatrix(data=lda.preds,reference=lda_valid$fracture,positive="Yes")
roclda=roc(response=lda_valid$fracture,predictor=lda.m.pred$posterior[,2],levels=c("No","Yes"))
??roc
library(broom)
roclda=roc(response=lda_valid$fracture,predictor=lda.m.pred$posterior[,2],levels=c("No","Yes"))
library(pROC)
roclda=roc(response=lda_valid$fracture,predictor=lda.m.pred$posterior[,2],levels=c("No","Yes"))
plot(roclda,print.thres="best")
plot(roclda)
threshold=0.3
lda.preds<-factor(ifelse(lda.m.pred$posterior[,2] >threshold,"Yes","No"))
confusionMatrix(data=lda.preds,reference=lda_valid$fracture,positive="Yes")
roclda
qda.m <- qda(fracture~age+weight+height,data=lda_train)
qda.m
qda.m.pred <- predict(qda.m,lda_valid)
qda.m.pred
rocqda=roc(response=lda_valid$fracture,predictor=qda.m.pred$posterior[,2],levels=c("No","Yes"))
plot(rocqda)
rocqda=roc(response=lda_valid$fracture,predictor=qda.m.pred$posterior[,2],levels=c("No","Yes"))
plot(rocqda)
rocqda
threshold=0.3
qda.preds<-factor(ifelse(qda.m.pred$posterior[,2] >threshold,"Yes","No"))
confusionMatrix(data=qda.preds,reference=lda_valid$fracture,positive="Yes")
lda_plot <- cbind(lda_train,predict(lda.m,lda_valid))
lda_plot <- cbind(lda_train,predict(lda.m)$x)
ggplot(lda_plot, aes(LD1) +
geom_point(aes(color = fracture))
ggplot(lda_plot, aes(LD1))+
geom_point(aes(color = fracture))
ggplot(lda_plot, aes(LD1))+
geom_point(aes(color = fracture))
lda_plot
ggplot(lda_plot, aes(LD1))
ggplot(lda_plot, aes(LD1))+
geom_bar(aes(color = fracture))
ggplot(lda_plot, aes(LD1,fracture))+
geom_point(aes(color = fracture))
predict(lda.m)$x
rocqda=roc(response=lda_valid$fracture,predictor=qda.m.pred$posterior[,2],levels=c("No","Yes"))
plot(rocqda)
??plot
decisionplot(lda.m,lda_train,class="fracture")
decisionplot(lda.m,lda_train,class="fracture")
??decisonplot
??decisionplot
plot(lda.m)
lda.m <- lda(fracture~age+weight+height,data=lda_train)
lda.m
plot(lda.m)
lda.m.pred
ldahist(lda.m.pred$x[,1],g=lda.m.pred$class)
set.seed(123)
# Split data into smaller sets: 80% training, 10% test, and 10% validate
ss <- sample(1:3, size = nrow(df), replace = TRUE, prob = c(0.8, 0.2))
train <- df[ss == 1, ]
test <- df[ss == 2, ]
```
=======
install.packages("ggplot2")
library(ggplot2)
g<-df %>%
group_by(fracture) %>%
summarise(cnt=n()) %>%
mutate(perc=round(cnt/sum(cnt),4))
g
ggplot(g,aes(x=fracture,y=perc,colour=fracture))+
geom_bar(aes(fill=fracture),show.legend=F,stat="identity")+
ylab("Proportion of fracture")
```
#### the possiblity of fracture is only 25 %. this is rare event.
>>>>>>> Stashed changes
### Objective 1
Display the ability to perform EDA and build a logistic regression model for interpretation purposes.
__Simple Logistic Regression__
```{r}
<<<<<<< HEAD
# Removing BMI and Fracscore due to multicollinearity
=======
# Removing BMI, Age, and Site ID due to multicollinearity
>>>>>>> 01c3b27ac0bb90438fe17f80748283bf37926416
train_sub <-
train %>%
select(-c("sub_id", "bmi", "age", "site_id", "frac_num", "smoke"))
# Logistic Model
log_model <- glm(fracture ~ ., data = train_sub, family = "binomial")
coef(summary(log_model))
glm_back <- step(log_model, direction = "backward")
glm_fwd <- step(log_model, direction = "forward")
glm_both <- step(log_model, direction = "both")
summary(glm_back)
glm_back$deviance
AIC(glm_back)
BIC(glm_back)
summary(glm_fwd)
glm_fwd$deviance
AIC(glm_fwd)
BIC(glm_fwd)
summary(glm_both)
glm_both$deviance
AIC(glm_both)
BIC(glm_both)
glm_both$coefficients
# Final Model
log_model <-
glm(fracture ~ priorfrac + height + momfrac + fracscore + bonemed_fu + bonetreat,
data = train_sub, family = "binomial")
summary(log_model)
# Predict test data based on model
predict_test <- predict(log_model, test, type = "response")
predict_val <- predict(log_model, valid, type = "response")
# Changing probabilities
predict_test_fact <- ifelse(predict_test > 0.3, "Yes", "No")
predict_val_fact <- ifelse(predict_val > 0.3, "Yes", "No")
# Model Performance
<<<<<<< HEAD
confusionMatrix(data = as.factor(predict_test), reference = test$fracture)
confusionMatrix(data = as.factor(predict_val), reference = valid$fracture)
=======
confusionMatrix(data = as.factor(predict_test_fact), reference = test$fracture)
confusionMatrix(data = as.factor(predict_val_fact), reference = valid$fracture)
# ROC-AUC Curve
ROCPred <- prediction(predict_test, test$fracture)
ROCPer <- performance(ROCPred, measure = "tpr", x.measure = "fpr")
auc <- performance(ROCPred, measure = "auc")
auc <- auc@y.values[[1]]
auc
# Plotting curve
plot(ROCPer)
plot(ROCPer, colorize = TRUE,
print.cutoffs.at = seq(0.1, by = 0.1),
main = "ROC CURVE")
abline(a = 0, b = 1)
auc <- round(auc, 4)
legend(.6, .4, auc, title = "AUC", cex = 1)
>>>>>>> 01c3b27ac0bb90438fe17f80748283bf37926416
```
### Objective 2
With a simple logistic regression model as a baseline, perform additional competing models to improve on prediction performance metrics.
__Complex Logistic Regression__
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
